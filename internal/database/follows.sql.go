// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFollow = `-- name: CreateFollow :one
INSERT INTO
    follows (id, feed_id, user_id, created_at, updated_at)
VALUES
    ($1, $2, $3, (NOW() AT TIME ZONE 'utc'), (NOW() AT TIME ZONE 'utc'))
RETURNING
    id, created_at, updated_at, user_id, feed_id
`

type CreateFollowParams struct {
	ID     uuid.UUID
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, createFollow, arg.ID, arg.FeedID, arg.UserID)
	var i Follow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFollows = `-- name: GetFollows :many
SELECT
    id, created_at, updated_at, user_id, feed_id
FROM
    follows
where user_id = $1
`

func (q *Queries) GetFollows(ctx context.Context, userID uuid.UUID) ([]Follow, error) {
	rows, err := q.db.QueryContext(ctx, getFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollow = `-- name: Unfollow :one
DELETE FROM follows
WHERE
    id = $1
    AND user_id = $2
RETURNING
    id
`

type UnfollowParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, unfollow, arg.ID, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
